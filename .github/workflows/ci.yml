name: ci
on:
  pull_request:
    branches: [main, develop] 

env:
  go_version: 1.17

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build
        run: go build -v .

  unit-tests:
    runs-on: ubuntu-latest
    needs:
      - build
    strategy:
      matrix:
        k3s_k8s_image:
          - 'rancher/k3s:v1.23.4-k3s1'
          - 'rancher/k3s:v1.22.7-k3s1'
          - 'rancher/k3s:v1.21.10-k3s1'
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Create Simple K8s Cluster
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: cluster
          args: >-
            --image=${{ matrix.k3s_k8s_image }}
      - name: Run tests
        run: go test -v ./... -coverprofile coverage.out
      - name: Codecov
        uses: codecov/codecov-action@v2.1.0
        if: ${{ matrix.k3s_k8s_image == 'rancher/k3s:v1.23.4-k3s1' }}
        with:
          files: coverage.out
          fail_ci_if_error: true

  integration-tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - name: Build Docker Image
        run: DOCKER_BUILDKIT=1 docker build -f Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/eventsrunner-k8s-sensor:${{ github.sha }} .
      - name: Scan Docker Image using Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/eventsrunner-k8s-sensor:${{ github.sha }}
          exit-code: 1
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'MEDIUM,HIGH,CRITICAL'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'
      - name: Create K8s Cluster
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: cluster
          args: >-
            --image='rancher/k3s:v1.23.4-k3s1'
            --agents=1
      - name: Upload Docker Image to K8s Cluster
        run: k3d image import -c cluster ${{ secrets.DOCKERHUB_USERNAME }}/eventsrunner-k8s-sensor:${{ github.sha }}
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run tests
        run: IMAGE_TAG=${{ github.sha }} INT_TEST="true" go test -v ./integration-tests/... 
